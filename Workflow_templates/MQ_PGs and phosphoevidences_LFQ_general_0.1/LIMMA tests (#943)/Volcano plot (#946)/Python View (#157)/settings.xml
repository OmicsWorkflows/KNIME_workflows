<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheOnDisc"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import seaborn as sns%%00010import pandas%%00010import numpy%%00010import matplotlib.pyplot as plt%%00010from io import BytesIO%%00010from math import log10%%00010%%00010%%00010threshold_logFC = flow_variables['logFC_threshold']%%00010threshold_P = flow_variables['P_threshold']%%00010threshold_P_log10 = -log10(threshold_P)%%00010%%00010# deleted cases and columns where there is not a single value%%00010all_input_data = input_table%%00010%%00010# writes down columns to be plotted into newly created dataframe%%00010graph_data = pandas.DataFrame()%%00010graph_data[flow_variables['p_value_column']] = all_input_data[flow_variables['p_value_column']]%%00010graph_data[flow_variables['logFC_column']] = all_input_data[flow_variables['logFC_column']]%%00010%%00010# drops cases where there are missing values%%00010graph_data_dropped_any = graph_data.dropna(axis=(0), how='any')%%00010%%00010# for QC only%%00010#print(graph_data.size)%%00010#print(graph_data_dropped_any.size)%%00010%%00010# categories for individual points in the scatter plot%%00010category_significant = 'Significant'%%00010category_significant_up = 'Up&amp;Sign.'%%00010category_significant_down = 'Down&amp;Sign.'%%00010category_notsignificant = 'Not sign.'%%00010%%00010%%00010def label_category (row):%%00010%%00009# change the grouping for the entries with significance but not a large enough Fold change%%00010%%00009if abs(row[flow_variables['logFC_column']]) &lt;= threshold_logFC and  row[p_log_column_name] &gt; threshold_P_log10 :%%00010%%00009%%00009return category_significant%%00010%%00009%%00010%%00009# change the grouping for the entries with both significance and large enough fold change%%00010%%00009if row[flow_variables['logFC_column']] &gt; threshold_logFC and  row[p_log_column_name] &gt; threshold_P_log10 :%%00010%%00009%%00009return category_significant_up%%00010    %%00010    # change the grouping for the entries with both significance and large enough fold change%%00010%%00009if row[flow_variables['logFC_column']] &lt; threshold_logFC and  row[p_log_column_name] &gt; threshold_P_log10 :%%00010%%00009%%00009return category_significant_down%%00010    %%00010    # and if none of the previous category, not significant is the result%%00010%%00009return category_notsignificant%%00010%%00010# gets column name with p-value%%00010p_log_column_name = flow_variables['p_value_column']%%00010%%00010# calculates -log10 values in case the p-value should be log transformed and renames the corresponding variable%%00010if flow_variables['additional_p_value_log'] == 1:%%00010%%00009# replaces zero values in original dataframe by the selected value%%00010%%00009graph_data_dropped_any['p_value_column_zero_replaced'] = graph_data_dropped_any[flow_variables['p_value_column']].replace(to_replace=0, value=flow_variables['zero_p_replacement'])%%00010%%00009# in case the selected value was actualy zero, it is replaced by NaN...%%00010%%00009graph_data_dropped_any[flow_variables['p_value_column']].replace(to_replace=0, value=numpy.NaN, inplace=True)%%00010%%00009# and rows containing NaN in the respective column are dropped afterwards%%00010%%00009graph_data_dropped_any.dropna(axis=0,how='all',subset=['p_value_column_zero_replaced'])%%00010%%00009# change column name to be used for plotting so it is evident it is -log10 value of the provided one%%00010%%00009p_log_column_name = '-log('+flow_variables['p_value_column']+')'%%00010%%00009graph_data_dropped_any[p_log_column_name] = graph_data_dropped_any['p_value_column_zero_replaced'].apply(lambda x: -log10(x))%%00010%%00010#input_table_dropped_all['category'] = input_table_dropped_all.apply(lambda row: label_category, axis=1)%%00010graph_data_dropped_any['category'] = graph_data_dropped_any.apply(lambda row: label_category(row), axis=1)%%00010%%00010# creates dictionary of all ratio/p-value categories%%00010categories_counts = graph_data_dropped_any['category'].value_counts().to_dict()%%00010%%00010# writes the varaibles for counts in idividudal point categories%%00010category_count_notsignificant = category_notsignificant + ' (' + str(categories_counts.get(category_notsignificant, 0)) + ')'%%00010category_count_significant = category_significant + ' (' + str(categories_counts.get(category_significant, 0)) + ')'%%00010category_count_significant_up = category_significant_up + ' (' + str(categories_counts.get(category_significant_up, 0)) + ')'%%00010category_count_significant_down = category_significant_down + ' (' + str(categories_counts.get(category_significant_down, 0)) + ')'%%00010%%00010# assigns color to concrete category%%00010palette_dict = {%%00010%%00009category_count_notsignificant: 'blue',%%00010%%00009category_count_significant: 'orange',%%00010%%00009category_count_significant_up: 'red',%%00010%%00009category_count_significant_down: 'green',%%00010%%00009}%%00010%%00010# replaces category name by the category name + number of cases in that category to be used in the graph later on%%00010graph_data_dropped_any['category'] = graph_data_dropped_any['category'].map({%%00010%%00009'Significant': category_count_significant, %%00010%%00009'Up&amp;Sign.': category_count_significant_up, %%00010%%00009'Down&amp;Sign.': category_count_significant_down, %%00010%%00009'Not sign.': category_count_notsignificant%%00010%%00009})%%00010%%00010# creates basic lmplot categorized using point category as specified above%%00010g = sns.lmplot(data=graph_data_dropped_any, x=flow_variables['logFC_column'], y=p_log_column_name, fit_reg=False, hue='category', legend_out=True, legend=False, palette=palette_dict, scatter_kws={'alpha':0.2})%%00010%%00010ax = plt.gca()%%00010%%00010# draws horizontal and vertical lines corresponding to the defined thresholds%%00010# color '0.5' means grey color...%%00010plt.axvline(x=threshold_logFC, color='0.5')%%00010plt.axvline(x=-threshold_logFC, color='0.5')%%00010plt.axhline(y=-log10(threshold_P), color='0.5')%%00010%%00010# sets graph x and y axis limit if they should be set manually%%00010if flow_variables['manual_y_axis_limits'] == 1:%%00010%%00009y_axis_limits = [float(item) for item in flow_variables['manual_y_axis_limits_values'].split(sep=';')]%%00010%%00009g.set(ylim=(y_axis_limits[0], y_axis_limits[1]))%%00010%%00010if flow_variables['manual_x_axis_limits'] == 1:%%00010%%00009x_axis_limits = [float(item) for item in flow_variables['manual_x_axis_limits_values'].split(sep=';')]%%00010%%00009g.set(xlim=(x_axis_limits[0], x_axis_limits[1]))%%00010%%00010plt.legend(loc='bottom left')%%00010%%00010# sets graph x and y axis labels based on the set variables%%00010if flow_variables['x_axis_label'] == '':%%00010%%00009plt.xlabel(flow_variables['logFC_column'])%%00010else:%%00010%%00009plt.xlabel(flow_variables['x_axis_label'])%%00010%%00010if flow_variables['y_axis_label'] == '':%%00010%%00009plt.ylabel(p_log_column_name)%%00010else:%%00010%%00009plt.ylabel(flow_variables['y_axis_label'])%%00010%%00010# sets plot title and subtitles%%00010plt.title('Volcano plot with selected categories \n' +%%00010%%00009flow_variables['graph_subtitle'] + '\n'%%00010%%00009'visualization thresholds: logFC ' + str(threshold_logFC) + ', P ' + str(threshold_P),%%00010%%00009weight='semibold')%%00010%%00010plt.tight_layout()%%00010%%00010# Create buffer to write into%%00010buffer = BytesIO()%%00010%%00010# Creates plot and write it into the buffer%%00010# data.plot().get_figure().savefig(buffer, format='svg')%%00010plt.savefig(buffer, format='png')%%00010# plt.show()%%00010%%00010# The output is the content of the buffer%%00010output_image = buffer.getvalue()%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="lmplot%%00013%%000105 categories"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="497"/>
<entry key="y-coordinate" type="xint" value="599"/>
<entry key="width" type="xint" value="126"/>
<entry key="height" type="xint" value="34"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="CONFIGURED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.view.Python2ViewNodeFactory"/>
<entry key="node-name" type="xstring" value="Python View"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.6.1.v201808311614"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.6.1.v201808311614"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python View"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
