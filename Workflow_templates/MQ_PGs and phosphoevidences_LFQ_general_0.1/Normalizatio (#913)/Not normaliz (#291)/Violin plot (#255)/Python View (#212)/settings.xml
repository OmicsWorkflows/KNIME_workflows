<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import seaborn as sns%%00010import matplotlib.pyplot as plt%%00010import pandas%%00010import os%%00010from io import BytesIO%%00010%%00010sns.set(style=&quot;whitegrid&quot;)%%00010%%00010# sets the scale keayword of the violin plots; 'width' - all violin plots will have the same width; 'count' the width will based on the counts of observations%%00010violin_scale = flow_variables['violinplot_scale']%%00010%%00010# sets variable for graph label based on the violin plot scale%%00010violin_scale_comment_dic = {%%00010%%00009'width': 'all violins have the same width',%%00010%%00009'count': 'violins width corresponds to the number of values'%%00010%%00009}%%00010%%00010# deleted cases and columns where there is not a single value%%00010input_table = input_table.dropna(axis=[0,1], how='all')%%00010%%00010# the size of the resulting figure (in inches) %%00010# related to the number of columns/samples%%00010fig, ax = plt.subplots()%%00010fig.set_size_inches(len(input_table.columns)*0.5+3, 5)%%00010%%00010# creates the basic violin plot%%00010g = sns.violinplot(data=input_table, scale=violin_scale, ax=ax)%%00010%%00010# Calculate number of obs per group &amp; median to position labels%%00010medians = input_table.median(axis=0).values%%00010maximum = max(input_table.max().values)%%00010# print(medians)%%00010nobs = input_table.count(axis=0).values%%00010# print(nobs)%%00010nobs = [str(x) for x in nobs.tolist()]%%00010# nobs = [&quot;n: &quot; + i for i in nobs]%%00010nobs = [i for i in nobs]%%00010%%00010# Add number of observations to the plot%%00010pos = range(len(nobs))%%00010for tick, label in zip(pos, g.get_xticklabels()):%%00010    g.text(pos[tick], maximum + maximum/30, nobs[tick], horizontalalignment='center', size='x-small', color='black',%%00010            weight='semibold')%%00010%%00010# rotates x axis labels so they are horizontally orianted so their size is not an issue%%00010plt.xticks(rotation='vertical')%%00010%%00010# plot description%%00010plt.xlabel(flow_variables['x_axis_label'])%%00010plt.ylabel(flow_variables['y_axis_label'])%%00010plt.title('Violin graphs and number of observed values: \n' +%%00010%%00009violin_scale_comment_dic.get(violin_scale) + '\n' +%%00010%%00009flow_variables['graph_subtitle'],%%00010%%00009weight='semibold')%%00010%%00010## sets graph y axis limit if they should be set manually%%00010#if flow_variables['manual_y_axis_limits'] == 1:%%00010#    g.set(ylim=(flow_variables['y_axis_manual_min'], flow_variables['y_axis_manual_max']))%%00010%%00010%%00010# sets graph x and y axis limit if they should be set manually%%00010if flow_variables['manual_y_axis_limits'] == 1:%%00010%%00009y_axis_limits = [float(item) for item in flow_variables['manual_y_axis_limits_values'].split(sep=';')]%%00010%%00009g.set(ylim=(y_axis_limits[0], y_axis_limits[1]))%%00010%%00010%%00010%%00010# sets tight plot layout so it fits properly%%00010plt.tight_layout()%%00010%%00010# Create buffer to write into%%00010buffer = BytesIO()%%00010%%00010# Create plot and write it into the buffer%%00010plt.savefig(buffer, format='png')%%00010%%00010# The output is the content of the buffer%%00010output_image = buffer.getvalue()%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="violin plot script"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="737"/>
<entry key="y-coordinate" type="xint" value="279"/>
<entry key="width" type="xint" value="126"/>
<entry key="height" type="xint" value="17"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="CONFIGURED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.view.Python2ViewNodeFactory"/>
<entry key="node-name" type="xstring" value="Python View"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.6.1.v201808311614"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.6.1.v201808311614"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python View"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
