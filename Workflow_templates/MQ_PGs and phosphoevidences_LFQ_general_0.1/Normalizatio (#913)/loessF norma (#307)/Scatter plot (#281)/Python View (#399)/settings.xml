<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import seaborn as sns%%00010import numpy as np%%00010import matplotlib.pyplot as plt%%00010from io import BytesIO%%00010from scipy.stats import gaussian_kde as kde%%00010from matplotlib.colors import Normalize%%00010from matplotlib import cm%%00010import pandas%%00010%%00010# creates discionaries of regression fit and lowess usage settings%%00010fit_regression_dict = {%%00010    1: True,%%00010    0: False,%%00010    }%%00010%%00010lowess_dict = {%%00010    'lowess': True,%%00010    'linear': False%%00010    }%%00010%%00010if flow_variables['size'] == &quot;None&quot;:%%00010%%00009size = None%%00010else:%%00010%%00009size = float(flow_variables['size'])%%00010%%00010%%00010# function to create colormap from the values (it should be used for each graph)%%00010def makeColors(vals):%%00010    colors = np.zeros((len(vals),3))%%00010    norm = Normalize(vmin=vals.min(), vmax=vals.max())%%00010    %%00010    #Can put any colormap you like here.%%00010    colors = [cm.ScalarMappable(norm=norm, cmap='jet').to_rgba(val) for val in vals]%%00010    %%00010    return colors%%00010%%00010# function to create unity line, x=y%%00010def plot_unity(xdata, ydata, **kwargs):%%00010    mn = min(xdata.min(), ydata.min())%%00010    mx = max(xdata.max(), ydata.max())%%00010    points = np.linspace(mn, mx, 100)%%00010    if flow_variables['MAplot'] == 0:%%00010        plt.gca().plot(points, points, color='0.3', marker=None,%%00010                linestyle='--', linewidth=1.0)%%00010    elif flow_variables['MAplot'] == 1:%%00010        plt.gca().plot(points, points-points, color='0.3', marker=None,%%00010                linestyle='--', linewidth=1.0)%%00010%%00010# deletes cases and columns where there is not a single value%%00010input_table_dropped_all = input_table.dropna(axis=(0, 1), how='all')%%00010%%00010def colored_regplot (xdata, ydata, **kwargs):%%00010    df = pandas.DataFrame()%%00010    df['xdata'] = xdata%%00010    df['ydata'] = ydata%%00010    #print(df)%%00010%%00010    # either imputes missing values by the selected value or removes the rows where there is just one missing value%%00010    if flow_variables['impute'] == 1:%%00010        # removes rows that have both missing values%%00010        df_dropped = df.dropna(axis=(0), how='all')%%00010        df_dropped.fillna(value=flow_variables['imputation_value'], inplace=True)%%00010        #print(df)%%00010    elif flow_variables['impute'] == 0:%%00010        # removes rows that have at least one missing value%%00010        df_dropped = df.dropna(axis=(0), how='any')%%00010    %%00010    # calculates density of values for the current regplot%%00010    # in case it will fail which should not happen in normal situation (only in case the two columns are identical), %%00010    # it will use just black color for the regplot%%00010    try:%%00010        densObj = kde(df_dropped.T)%%00010        colors = makeColors(densObj.evaluate(df_dropped.T))%%00010    %%00010    except:%%00010        colors = 'black'%%00010    %%00010    if flow_variables['MAplot'] == 0:%%00010        sns.regplot(df_dropped['xdata'], df_dropped['ydata'], marker=&quot;+&quot;, %%00010            lowess=lowess_dict[flow_variables['regression_type']], %%00010            fit_reg=fit_regression_dict[flow_variables['fit_regression']], %%00010            line_kws={&quot;color&quot;: &quot;red&quot;}, %%00010            scatter_kws={'alpha':0.7,'color': colors}, **kwargs)%%00010    elif flow_variables['MAplot'] == 1:%%00010        sns.regplot((df_dropped['xdata']+df_dropped['ydata'])/2, df_dropped['xdata']-df_dropped['ydata'], marker=&quot;+&quot;, %%00010            lowess=lowess_dict[flow_variables['regression_type']], %%00010            fit_reg=fit_regression_dict[flow_variables['fit_regression']], %%00010            line_kws={&quot;color&quot;: &quot;red&quot;}, %%00010            scatter_kws={'alpha':0.7,'color': colors}, **kwargs)%%00010%%00010# creates basic PairGrid onto which individual plots will be mapped%%00010g = sns.PairGrid(data=input_table_dropped_all, size=size)%%00010#g = sns.PairGrid(data=input_table_dropped_all, size=figsize)%%00010%%00010# maps kde plot into the diagonal part of the plot%%00010g.map_diag(sns.kdeplot)%%00010%%00010# maps colored regplot (see above) onto upper and lower part of the grid%%00010g.map_upper(colored_regplot)%%00010g.map_lower(colored_regplot)%%00010%%00010# in case the unity lines should be displayd they are plotted here%%00010if flow_variables['show_unity'] == 1:%%00010    g.map_offdiag(plot_unity)%%00010%%00010# plot title generation based on the settings%%00010# title_lines varaible is used to make a space for the whole title in the end...%%00010if flow_variables['MAplot'] == 0:%%00010    graphtitle_whole = &quot;Density (dark blue-&gt;dark red) scatter plot ('y' on 'x') matrix&quot;%%00010elif flow_variables['MAplot'] == 1:%%00010    graphtitle_whole = &quot;Density (dark blue-&gt;dark red) MA plot ('x-y' on '(x+y)/2') matrix&quot;%%00010%%00010title_lines = 1%%00010%%00010if flow_variables['impute'] == 1:%%00010    graphtitle_whole = graphtitle_whole + '\n pairwise imputation by ' + str(flow_variables['imputation_value']) + ' was done when single value was missing'%%00010    title_lines = title_lines + 1%%00010%%00010if flow_variables['fit_regression'] == 1:%%00010    if flow_variables['regression_type'] == 'lowess':%%00010        graphtitle_whole = graphtitle_whole + '\n red curve is estimated nonparametric lowess model'%%00010    elif flow_variables['regression_type'] == 'linear':%%00010        graphtitle_whole = graphtitle_whole + '\n red curve is estimated linear regression model'%%00010    title_lines = title_lines + 1%%00010%%00010if flow_variables['show_unity'] == 1:%%00010    graphtitle_whole = graphtitle_whole + '\n dashed line is unity line (x=y)'%%00010    title_lines = title_lines + 1%%00010%%00010if flow_variables['graph_subtitle'] != '':%%00010    graphtitle_whole = graphtitle_whole + '\n' + flow_variables['graph_subtitle']%%00010    title_lines = title_lines + 1%%00010%%00010%%00010# sets graph x and y axis limit if they should be set manually%%00010if flow_variables['manual_y_axis_limits'] != &quot;None&quot;:%%00010%%00009y_axis_limits = [float(item) for item in flow_variables['manual_y_axis_limits'].split(sep=';')]%%00010%%00009g.set(ylim=(y_axis_limits[0], y_axis_limits[1]))%%00010%%00010if flow_variables['manual_x_axis_limits'] != &quot;None&quot;:%%00010%%00009x_axis_limits = [float(item) for item in flow_variables['manual_x_axis_limits'].split(sep=';')]%%00010%%00009g.set(xlim=(x_axis_limits[0], x_axis_limits[1]))%%00010%%00010%%00010# gets the number of columns to be plotted agains each other%%00010columns_count = len(input_table_dropped_all.columns)%%00010%%00010# defines space for the title based on the given number of title lines and number of columns in the data%%00010title_space = (title_lines * (0.1 / (columns_count+1))) + (0.1 / (columns_count+1))%%00010%%00010plt.subplots_adjust(top=1-title_space)%%00010%%00010g.fig.suptitle(graphtitle_whole)%%00010%%00010# Create buffer to write into%%00010buffer = BytesIO()%%00010%%00010# Creates plot and write it into the buffer%%00010plt.savefig(buffer, format='png')%%00010%%00010# The output is the content of the buffer%%00010output_image = buffer.getvalue()%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="scatterplot matrix"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="643"/>
<entry key="y-coordinate" type="xint" value="559"/>
<entry key="width" type="xint" value="126"/>
<entry key="height" type="xint" value="17"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.view.Python2ViewNodeFactory"/>
<entry key="node-name" type="xstring" value="Python View"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.6.1.v201808311614"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.6.1.v201808311614"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python View"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
