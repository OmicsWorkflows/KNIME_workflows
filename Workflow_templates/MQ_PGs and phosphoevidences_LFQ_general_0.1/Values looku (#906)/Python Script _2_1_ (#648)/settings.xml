<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import numpy%%00010import pandas%%00010import sys%%00010%%00010# imports just a single column containing IDs in input table 1 that should be searched for in input table 2%%00010# dataframe row index will be the same...%%00010%%00010# converts top input table IDs column dtype to str if it is not already to be compatible with the search later on%%00010if not input_table_1[flow_variables['top_input_ids_column']].dtype == 'object':%%00010%%00009input_table_1[flow_variables['top_input_ids_column']] = input_table_1[flow_variables['top_input_ids_column']].astype(str)%%00010%%00010data = input_table_1[flow_variables['top_input_ids_column']]%%00010%%00010# reads just a columns containing data and ID column%%00010data_to_add = input_table_2%%00010%%00010# converts bottom table ID column dtype to str if it is not already to be compatible with the search later on%%00010if not data_to_add[flow_variables['bottom_input_id_column']].dtype == 'object':%%00010%%00009data_to_add[flow_variables['bottom_input_id_column']] = data_to_add[flow_variables['bottom_input_id_column']].astype(str)%%00010%%00010# reindexes input table 2 to have index equal to the ID column selected%%00010data_to_add_reindexed = data_to_add.set_index(flow_variables['bottom_input_id_column'])%%00010%%00010# names of the columns that should be added to the input table 1 based on their selection%%00010column_names_list = data_to_add_reindexed.columns.values%%00010%%00010# creates non redundant form of dataframe from input table 1%%00010results_unique_ids_sets = input_table_1.drop_duplicates(subset=flow_variables['top_input_ids_column'], keep='first')%%00010%%00010results_unique_ids_sets['ids_list'] = results_unique_ids_sets[flow_variables['top_input_ids_column']].str.split(flow_variables['top_input_IDs_delimiter'])%%00010#print(results_unique_ids_sets.head)%%00010%%00010i = len(results_unique_ids_sets.index)%%00010%%00010print(&quot;Number of IDs rows in non redundant dataframe to process: &quot; + str(i))%%00010%%00010j = 0%%00010%%00010for row in results_unique_ids_sets.itertuples():%%00010%%00009j += 1%%00010%%00009print(&quot;Processing row number &quot;+ str(j) +&quot; &quot;+str(row[2]))%%00010%%00009# searches for ID only in case there is any...%%00010    %%00010%%00009if not row[2] == None:%%00010%%00009%%00009for column_name in column_names_list:%%00010%%00009%%00009%%00009values_to_add_list = []%%00010%%00009%%00009%%00009for item in row[2]:%%00010%%00009%%00009%%00009%%00009if item in data_to_add_reindexed.index:%%00010%%00009%%00009%%00009%%00009%%00009values_to_add_list.append(data_to_add_reindexed.loc[item, column_name])%%00010%%00009%%00009%%00009%%00009else:%%00010%%00009%%00009%%00009%%00009%%00009values_to_add_list.append(&quot;&quot;)%%00010%%00009%%00009%%00009values_to_add_list_string = flow_variables['looked_up_values_delimiter'].join(map(str, values_to_add_list))%%00010%%00009%%00009%%00009results_unique_ids_sets.loc[row[0], flow_variables['columns_prefix']+column_name+flow_variables['columns_suffix']] = values_to_add_list_string%%00010%%00010#print(input_table_1.head)%%00010%%00010# merges the dataframe with looked up values with the original dataframe containing redundant sets of IDs%%00010results = input_table_1.reset_index().merge(how='left', right=results_unique_ids_sets, on=flow_variables['top_input_ids_column']).set_index('index')%%00010#print(results.head)%%00010%%00010# removes supporting columns%%00010results.drop(columns=['ids_list'], inplace=True)%%00010%%00010# writes the output table%%00010output_table = results%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="python script"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="577"/>
<entry key="y-coordinate" type="xint" value="479"/>
<entry key="width" type="xint" value="126"/>
<entry key="height" type="xint" value="17"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.6.1.v201808311614"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.6.1.v201808311614"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
