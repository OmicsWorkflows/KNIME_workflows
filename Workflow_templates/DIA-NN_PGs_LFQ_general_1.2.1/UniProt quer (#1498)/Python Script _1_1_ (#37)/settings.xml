<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="from pandas import DataFrame%%00010%%00010def get_output_table():%%00010    # creates initial set of lists to be used later on%%00010    initial_accession_ids_list = list()%%00010    accession_ids_list = list()%%00010    accession_woprefix_ids_list = list()%%00010    accession_woprefix_wosuffix_ids_list = list()%%00010    body_content = input_table.copy()[flow_variables[&quot;accession_id_column_name&quot;]]%%00010    # creates initial set of IDs%%00010    for key, value in body_content.iteritems():%%00010        for accession_id in value.split(flow_variables['proteinIDs_delimiter']):%%00010            initial_accession_ids_list.append(accession_id)%%00010    # removes common prefix if requested or simply copies the initial list of accessions%%00010    if flow_variables['prefix_to_remove'] != &quot;&quot;:%%00010        for accession in initial_accession_ids_list:%%00010            if accession.startswith(flow_variables['prefix_to_remove']):%%00010                accession_woprefix_ids_list.append (accession[len(flow_variables['prefix_to_remove']):])%%00010            else:%%00010                accession_woprefix_ids_list.append (accession)%%00010    else:%%00010        accession_woprefix_ids_list = initial_accession_ids_list%%00010    %%00010    # removes common suffix if requested or simply copies the list of accessions after removal of common prefix%%00010    if flow_variables['suffix_to_remove'] != &quot;&quot;:%%00010        for accession in accession_woprefix_ids_list:%%00010            if accession.endswith(flow_variables['suffix_to_remove']):%%00010                accession_woprefix_wosuffix_ids_list.append(accession[:-len(flow_variables['suffix_to_remove'])])%%00010            else:%%00010                accession_woprefix_wosuffix_ids_list.append(accession)                %%00010    else:%%00010        accession_woprefix_wosuffix_ids_list = accession_woprefix_ids_list%%00010%%00010    # creates list of tupples combining intial set of IDs and IDs without common prefix and or suffix as requested%%00010    data_for_df = list(zip(initial_accession_ids_list, accession_woprefix_wosuffix_ids_list))%%00010%%00010    # creates a dataframe to be returned based on the list of tupples%%00010    return DataFrame(data_for_df, columns=[&quot;initial_protein_id&quot;, &quot;protein_id&quot;])%%00010%%00010output_table = get_output_table()"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="parse accession ids"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="329"/>
<entry key="y-coordinate" type="xint" value="379"/>
<entry key="width" type="xint" value="142"/>
<entry key="height" type="xint" value="17"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.1.3.v202005112253"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.1.3.v202005112253"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 1186, Cols: 2"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="b53324a7-528a-4911-a21f-982ee5606049"/>
</config>
</config>
