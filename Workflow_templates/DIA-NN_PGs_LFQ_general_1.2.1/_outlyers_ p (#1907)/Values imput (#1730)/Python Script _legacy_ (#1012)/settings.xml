<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="# imputes values by specified number/constant%%00010import pandas%%00010import numpy%%00010import sys%%00010%%00010# reads the table containing only columns to be processed%%00010data = input_table_1%%00010%%00010# reads the table containing columns to be used as a grouping variables%%00010grouping_columns = input_table_2%%00010%%00010# dictionary of values to be replaced for mapping of set values to values to be replaced%%00010imputation_mapping = {%%00010%%00009'zero': 0,%%00010%%00009'NaN': numpy.nan%%00010%%00009}%%00010%%00010# replaces value to be replaced in the whole dataframe to %%00010# 'to replace' string that will be replaced in the next xtep%%00010data_to_impute_text = data.replace(to_replace=imputation_mapping[flow_variables['value_to_impute']], value='to replace')%%00010%%00010# creates matrix of imputed values to be used if needed; imputed values are &quot;True&quot;%%00010imputed_values_matrix = data_to_impute_text.isin(['to replace'])%%00010%%00010# replaces value to be replaced in the whole dataframe to NaN for calculation purposes%%00010data_to_impute_nan = data.replace(to_replace=imputation_mapping[flow_variables['value_to_impute']], value=numpy.nan)%%00010%%00010# method for replacement of 'to replace' values%%00010def impute_df (df, columnwise, quantile):%%00010%%00009if columnwise == False:%%00010%%00009%%00009df_replaced = df.replace(to_replace='to replace', value = numpy.nanquantile(df.replace(to_replace='to replace', value = numpy.nan), quantile) * flow_variables['imputation_factor'])%%00009%%00010%%00009elif columnwise == True:%%00010%%00009%%00009df_replaced = df.copy()%%00010%%00009%%00009for column in df.columns:%%00010%%00009%%00009%%00009# Calculate the selected quantile value for the column%%00010%%00009%%00009%%00009quantile_val = numpy.nanquantile(df[column].replace(to_replace='to replace', value = numpy.nan), quantile)%%00010%%00009%%00009%%00009# Impute missing values in the column with the calculated quantile value%%00010%%00009%%00009%%00009df_replaced[column] = df[column].replace(to_replace='to replace', value = quantile_val * flow_variables['imputation_factor'])%%00010%%00009return df_replaced%%00010%%00010# performs the missing value replacement based on the selected method%%00010# global minimum imputation method%%00010if flow_variables['imputation_method'] == 'constant':%%00010%%00009data_imputed = data_to_impute_text.replace(to_replace='to replace', value = flow_variables['imputation_constant'] * flow_variables['imputation_factor'])%%00010%%00010elif flow_variables['imputation_method'] == 'column minimum':%%00010%%00009data_imputed = impute_df (data_to_impute_text, columnwise=True, quantile=0)%%00010%%00010elif flow_variables['imputation_method'] == 'global minimum':%%00010%%00009data_imputed = impute_df (data_to_impute_text, columnwise=False, quantile=0)%%00010%%00010elif flow_variables['imputation_method'] == 'column quantile':%%00010%%00009data_imputed = impute_df (data_to_impute_text, columnwise=True, quantile=flow_variables['quantile'])%%00010%%00010elif flow_variables['imputation_method'] == 'global quantile':%%00010%%00009data_imputed = impute_df (data_to_impute_text, columnwise=False, quantile=flow_variables['quantile'])%%00010%%00010# minimum within a group based on the grouping column(s) imputation%%00010elif flow_variables['imputation_method'] == 'global minimum per group':%%00010%%00009%%00010%%00009# combines both dataframes into a single dataframe to be processed%%00010%%00009data_combined = pandas.concat([grouping_columns, data_to_impute_text], axis=1)%%00010%%00009%%00010%%00009# creates a list of columns in grouping and data dataframes%%00010%%00009grouping_columns_names = list(grouping_columns.columns.values)%%00010%%00009data_columns_names = list(data_to_impute_text.columns.values)%%00010%%00009%%00010%%00009# imputes values using the specified function%%00010%%00009data_imputed_only_data = data_combined.groupby(grouping_columns_names)[data_columns_names].apply(lambda x: impute_df (x, columnwise=False, quantile=0))%%00010%%00009%%00010%%00009# concatenates grouping column(s) and data columns with imputed values%%00010%%00009data_imputed = pandas.concat([grouping_columns, data_imputed_only_data], axis=1)%%00010%%00010else:%%00010%%00009raise SystemExit('Not expected imputation type, please revisit the form and consider contacting support.')%%00010%%00010# add suffix to column names%%00010data_with_suffix = data_imputed.add_suffix(flow_variables['columns_suffix'])%%00010%%00010## outputs%%00010output_table_1 = data_with_suffix%%00010output_table_2 = imputed_values_matrix%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="value imputation"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="409"/>
        <entry key="y-coordinate" type="xint" value="539"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="16"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script (legacy)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202211291448"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python 2 Integration (legacy)"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.1.v202301311311"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_1">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
            <config key="port_1">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script (legacy)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
        <config key="port_2">
            <entry key="index" type="xint" value="2"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
