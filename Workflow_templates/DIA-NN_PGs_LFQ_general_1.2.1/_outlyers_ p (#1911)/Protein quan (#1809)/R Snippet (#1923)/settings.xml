<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="library(magrittr)%%00010library(stringr)%%00010%%00010df &lt;- knime.in%%00010df$PG &lt;- as.character(df$PG)%%00010df &lt;- df[df$PG != &quot;&quot;,]%%00010%%00010# split PGs based on whether they show up solitarily on in groups%%00010shared_PGs_i &lt;- grep(knime.flow.in[[&quot;separator&quot;]], df$PG)%%00010shared_PGs &lt;- df$PG[shared_PGs_i]%%00010shared_PGs_unique &lt;- unique(shared_PGs)%%00010%%00010if (length(shared_PGs_unique) &gt; 0){%%00010%%00009protein_group &lt;- unique(as.character(df$PG))%%00010%%00009single_PGs &lt;- setdiff(protein_group, shared_PGs_unique)%%00010%%00010%%00009shared_PGs &lt;- strsplit(shared_PGs, knime.flow.in[[&quot;separator&quot;]])%%00010%%00009shared_PGs &lt;- lapply(1:length(shared_PGs), function(x) {%%00010%%00009%%00009temp &lt;- shared_PGs[[x]]%%00010%%00009%%00009temp &lt;- temp[temp != &quot;&quot;]%%00010%%00009%%00009shared_PGs[x] &lt;- temp%%00010%%00009})%%00010%%00009%%00010%%00009shared_proteins_only &lt;- unique(unlist(shared_PGs))%%00010%%00009shared_proteins_only &lt;- shared_proteins_only[shared_proteins_only %in% single_PGs == FALSE]%%00010current &lt;- 'P17693'%%00010%%00009while (length(shared_proteins_only) &gt; 0) {%%00010%%00009%%00009current &lt;- shared_proteins_only[1]%%00010%%00009%%00009%%00010%%00009%%00009i &lt;- which(unlist(lapply(shared_PGs, function(x) current %in% x)))%%00010%%00010%%00009%%00009# PGs which contain the given protein%%00010%%00009%%00009c_PGs &lt;- shared_PGs[i]%%00010%%00010%%00009%%00009# all proteins contained in these PGs%%00010%%00009%%00009c_proteins &lt;- unique(unlist(c_PGs))%%00010%%00009%%00009c_proteins_shared &lt;- c_proteins[c_proteins %in% single_PGs == FALSE]%%00010%%00010%%00009%%00009# group of proteins that occurs in all c_PGs%%00010%%00009%%00009g_proteins &lt;- names(table(unlist(c_PGs))[table(unlist(c_PGs)) == length(c_PGs)])%%00010%%00009%%00009g_proteins &lt;- g_proteins[g_proteins %in% single_PGs == FALSE]%%00010%%00010%%00009%%00009# group of proteins that always occurs together, used for string replacement%%00010%%00009%%00009r_proteins &lt;- g_proteins%%00010%%00010%%00009%%00009for (current2 in g_proteins[g_proteins != current]) {%%00010%%00009%%00009%%00009i2 &lt;- which(unlist(lapply(shared_PGs, function(x) current2 %in% x)))%%00010%%00010%%00009%%00009%%00009if (sum(i2 != i) &gt; 0) {%%00010%%00009%%00009%%00009%%00009r_proteins &lt;- r_proteins[r_proteins != current2]%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (length(r_proteins) &gt; 1) {%%00010%%00009%%00009%%00009replacement &lt;- paste(r_proteins, collapse = &quot;+&quot;)%%00010%%00009%%00009%%00009shared_PGs[i] &lt;- lapply(i, function(x) {%%00010%%00009%%00009%%00009%%00009temp &lt;- shared_PGs[[x]]%%00010%%00009%%00009%%00009%%00009temp &lt;- gsub(current, replacement, temp, fixed = TRUE)%%00010%%00009%%00009%%00009%%00009i_remove &lt;- which(temp %in% r_proteins[r_proteins != current])%%00010%%00009%%00009%%00009%%00009temp &lt;- temp[-i_remove]%%00010%%00009%%00009%%00009%%00009shared_PGs[x] &lt;- temp%%00010%%00009%%00009%%00009})%%00010%%00009%%00009}%%00010%%00010%%00009%%00009shared_proteins_only &lt;- shared_proteins_only[!shared_proteins_only %in% g_proteins]%%00010%%00009}%%00010%%00010%%00009# replace strings in the original PG column%%00010%%00009shared_PGs_collapsed &lt;- unlist(lapply(shared_PGs, function (x) paste(x, collapse = knime.flow.in[[&quot;separator&quot;]])))%%00010%%00009df$PG_replacement &lt;- as.character(df$PG)%%00010%%00009df$PG_replacement[shared_PGs_i] &lt;- shared_PGs_collapsed%%00010%%00010%%00009# again recalculate shared and unique peptides%%00010%%00009shared_PGs_2_i &lt;- grep(knime.flow.in[[&quot;separator&quot;]], df$PG_replacement)%%00010%%00009shared_PGs_2 &lt;- df$PG_replacement[shared_PGs_2_i]%%00010%%00009shared_PGs_2_unique &lt;- unique(unlist(lapply(shared_PGs_2, function(x) strsplit(x, knime.flow.in[[&quot;separator&quot;]]))))%%00010%%00010%%00009single_PGs_2 &lt;- df$PG_replacement[-shared_PGs_2_i]%%00010%%00010%%00009# which proteins with shared peptides don't have any single peptides%%00010%%00009PGs_to_remove &lt;- shared_PGs_2_unique[!shared_PGs_2_unique %in% single_PGs_2]%%00010%%00009df$PG_removed &lt;- df$PG_replacement%%00010%%00010%%00009if(length(PGs_to_remove) &gt; 0){%%00010%%00009%%00009df$PG_removed &lt;- unlist(lapply(df$PG_removed, function(x){%%00010%%00009%%00009%%00009temp &lt;- unlist(strsplit(x, knime.flow.in[[&quot;separator&quot;]]))%%00010%%00009%%00009%%00009temp &lt;- temp[!temp %in% PGs_to_remove]%%00010%%00009%%00009%%00009return(paste(temp, collapse = knime.flow.in[[&quot;separator&quot;]]))%%00010%%00009%%00009}))%%00010%%00009}%%00010%%00010%%00009df$PG &lt;- df$PG_replacement%%00010%%00009df$PG_removed &lt;- NULL%%00010%%00009df$PG_replacement &lt;- NULL%%00010}%%00010%%00010knime.out &lt;- df"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="false"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="removes PGs %%00010which don't%%00010have unique%%00010 peptides"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1229"/>
        <entry key="y-coordinate" type="xint" value="119"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="64"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
    <entry key="node-name" type="xstring" value="R Snippet"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.7.0.v202206271529"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.7.0.v202211090002"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R Snippet"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
