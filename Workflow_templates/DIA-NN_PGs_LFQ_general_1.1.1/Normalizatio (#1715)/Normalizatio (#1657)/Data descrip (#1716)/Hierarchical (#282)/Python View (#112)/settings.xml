<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="########################################################################%%00010############################ SCRIPT SETTINGS ###########################%%00010########################################################################%%00010%%00010### clustering settings%%00010%%00010# metric: e.g. 'cityblock', 'euclidean'%%00010distance_metric = flow_variables['distance_metric']%%00010%%00010# method: e.g. 'complete', 'average'%%00010cluster_method = flow_variables['cluster_method']%%00010%%00010########################################################################%%00010########################################################################%%00010%%00010import matplotlib.pyplot as plt%%00010import pandas%%00010from scipy.cluster import hierarchy%%00010from io import BytesIO%%00010%%00010if flow_variables['figsize'] == &quot;Auto&quot;:%%00010%%00009figsize = [8,6]%%00010else:%%00010%%00009figsize = [float(item) for item in flow_variables['figsize'].split(';')]%%00010%%00010data = input_table%%00010data_transposed = data.transpose()%%00010%%00010data_rowswithblank_dropped_all = data.dropna(axis=0, how='all')%%00010nancounts = data_rowswithblank_dropped_all.isnull().sum()%%00010numcounts = data_rowswithblank_dropped_all.count()%%00010%%00010data_rowswithblank_dropped_any = data.dropna(axis=0, how='any')%%00010%%00010data_rowswithblank_dropped_any_cases = len(data_rowswithblank_dropped_any.index)%%00010data_rowswithblank_dropped_all_cases = len(data_rowswithblank_dropped_all.index)%%00010%%00010data_rowswithblank_dropped_transposed = data_rowswithblank_dropped_any.transpose()%%00010%%00010fig = plt.plot()%%00010%%00010initial_plot_labels = list(zip(data_rowswithblank_dropped_transposed.index.tolist(), (numcounts.tolist())))%%00010%%00010plot_labels = []%%00010%%00010for tup in initial_plot_labels:%%00010    label = tup[0] + ' (n=' + str(tup[1]) + ')'%%00010    # for item in tup:%%00010    #     label = label + ' (' + str(item) + ')'%%00010%%00010    plot_labels.append(label)%%00010%%00010# print(plot_labels)%%00010%%00010# data_rowswithblank_dropped_transposed_distance_matrix = hierarchy.distance.pdist(data_rowswithblank_dropped_transposed, clustering_metric)%%00010# print(data_rowswithblank_dropped_transposed_distance_matrix)%%00010# print(data_rowswithblank_dropped_transposed_distance_matrix.size)%%00010%%00010plt.figure(figsize=(figsize))%%00010%%00010Z = hierarchy.linkage(data_rowswithblank_dropped_transposed, method=cluster_method, metric=distance_metric)%%00010dn = hierarchy.dendrogram(Z, orientation='right', labels=plot_labels)%%00010plt.ylabel(flow_variables['y_axis_label'])%%00010plt.xlabel(flow_variables['x_axis_label'])%%00010%%00010plt.title('Hierachical clustering (based on ' + str(data_rowswithblank_dropped_any_cases) +%%00010          ' out of ' + str(data_rowswithblank_dropped_all_cases) + ' cases): \n'%%00010          'Distance metric: ' + distance_metric + ', Clustering method: ' + cluster_method + '\n' +%%00010          flow_variables['graph_subtitle'], loc='right')%%00010%%00010plt.tight_layout()%%00010%%00010%%00010# Create buffer for image writing and writes the image into it%%00010buffer = BytesIO()%%00010plt.savefig(buffer, format='png')%%00010output_image = buffer.getvalue()%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value="/home/knimeuser/.pyenv/versions/4-5-2a/bin/python3"/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="python3Command">
                <entry key="used_variable" type="xstring" value="python3command"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Hierarchical clustering"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="627"/>
        <entry key="y-coordinate" type="xint" value="559"/>
        <entry key="width" type="xint" value="146"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles"/>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.view.Python2ViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="Python View"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.6.0.v202206032030"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.6.0.v202206100850"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Python View"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
