<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="from pandas import DataFrame%%00010proteinID_column_name = flow_variables['output_proteinID_column_name']%%00010%%00010def get_output_column_headers():%%00010    output_columns = flow_variables[&quot;output_column_names&quot;]%%00010    return output_columns.split(&quot;,&quot;) if len(output_columns) != 0 else []%%00010%%00010%%00010def get_column_headers(body_content):%%00010    try:%%00010        first_line = body_content[0]%%00010        headers_list = first_line.splitlines()[0].split(&quot;\t&quot;)%%00010    except KeyError:%%00010        raise KeyError(&quot;can not get column headers&quot;)%%00010    return headers_list%%00010%%00010%%00010def create_dataframe(column_headers,input_table_copy):%%00010    %%00010    data_list = []%%00010    for idx, value in enumerate(input_table_copy[&quot;body&quot;]):%%00010        # append Protein ID in front of other columns (length of body_content and proteinID_values is the same%%00010        data_list.append([input_table_copy[proteinID_column_name][idx]] + value.splitlines()[1].split(&quot;\t&quot;))%%00010%%00010    return DataFrame(data=data_list, columns=[proteinID_column_name] + column_headers)%%00010%%00010%%00010def get_output_table():%%00010%%00010    if input_table.empty:%%00010        return DataFrame()%%00010%%00010    try:%%00010        input_table_copy = input_table.copy() %%00010%%00010        column_headers = get_column_headers(input_table_copy[&quot;body&quot;])%%00010        output_column_names = get_output_column_headers()%%00010%%00010        if len(output_column_names) == 0:%%00010            return create_dataframe(column_headers, input_table_copy)%%00010%%00010        if len(column_headers) != len(output_column_names):%%00010            raise ValueError(%%00010                &quot;custom headers length not compatible - requested {0}, but retrieved {1}&quot;.format(len(output_column_names), len(column_headers)))%%00010        else:%%00010            return create_dataframe(output_column_names, input_table_copy)%%00010%%00010    except KeyError:%%00010    %%00009raise KeyError(&quot;column 'body' not found in input table&quot;)%%00010%%00010output_table = get_output_table()"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="process tab response"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1569"/>
<entry key="y-coordinate" type="xint" value="239"/>
<entry key="width" type="xint" value="142"/>
<entry key="height" type="xint" value="17"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.1.3.v202005112253"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.1.3.v202005112253"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
