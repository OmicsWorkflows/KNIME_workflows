<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="script" type="xstring" value="library(dplyr)%%00010library(magrittr)%%00010%%00010df &lt;- knime.in%%00010df_final &lt;- knime.in%%00010%%00010# create character vector for design%%00010design &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;design&quot;]], &quot;,&quot;)))%%00010%%00010if (knime.flow.in[[&quot;sample_type_summary&quot;]] == 0 &amp; knime.flow.in[[&quot;biol_repl_summary&quot;]] == 0) design &lt;- &quot;sum&quot;%%00010unique_design &lt;- unique(design)%%00010%%00010# list of columns containing processed data%%00010if (knime.flow.in[[&quot;sample_type_summary&quot;]] == 1){%%00010%%00009sum_columns &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;summary_cols_sample&quot;]], &quot;;&quot;)))%%00010%%00009sum_columns &lt;- unique(sum_columns)%%00010} else if (knime.flow.in[[&quot;biol_repl_summary&quot;]] == 1){%%00010%%00009repl_sum_columns &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;summary_cols_repl&quot;]], &quot;;&quot;)))%%00010%%00009sum_columns &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;summary_cols_sample&quot;]], &quot;;&quot;)))%%00010%%00010%%00009sum_columns_unique &lt;- unique(sum_columns)%%00010%%00010%%00009for (x in sum_columns_unique){%%00010%%00009%%00009i &lt;- which(sum_columns == x)%%00010%%00009%%00009repl_sum_columns_selected &lt;- unique(repl_sum_columns[i])%%00010%%00009%%00009df[,x] &lt;- rowSums(df[,repl_sum_columns_selected])%%00010%%00009}%%00010%%00009%%00010%%00009sum_columns &lt;- sum_columns_unique%%00010} else {%%00010%%00009sum_columns &lt;- &quot;sum&quot;%%00010%%00009bin_columns &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;Column Header&quot;]],&quot;,&quot;)))%%00010%%00009df$sum &lt;- rowSums(df[,bin_columns])%%00010}%%00010%%00010# separate dfs%%00010df_sum &lt;- df %&gt;%%%00010%%00009select(all_of(sum_columns))%%00010colnames(df_sum) &lt;- unique_design%%00010%%00010# calculate sizes of groups%%00010sizes &lt;- as.data.frame(table(design))%%00010sizes &lt;- sizes[match(unique_design, sizes$design),]%%00010%%00010# get threshold(s)%%00010if (knime.flow.in[[&quot;filter_rows (index)&quot;]] == 1){%%00010%%00009threshold &lt;- trimws(knime.flow.in[[&quot;thresholds&quot;]])%%00010%%00010%%00009if(grepl(&quot;%&quot;, threshold)){%%00010%%00009%%00009threshold_type &lt;- &quot;percent&quot;%%00010%%00009%%00009threshold &lt;- as.numeric(gsub(&quot;[^\\d]+&quot;, &quot;&quot;, threshold, perl = TRUE))%%00010%%00009} else {%%00010%%00009%%00009threshold_type &lt;- &quot;absolute&quot;%%00010%%00009%%00009threshold &lt;- as.numeric(threshold)%%00010%%00009}%%00010%%00009%%00010} else {%%00010%%00009temp &lt;- trimws(unlist(strsplit(knime.flow.in[[&quot;thresholds&quot;]], &quot;,&quot;)))%%00010%%00009temp &lt;- trimws(unlist(strsplit(temp, &quot;:&quot;)))%%00010%%00010%%00009temp_s &lt;- temp[seq(1, length(temp), by = 2)]%%00010%%00009temp_t &lt;- temp[seq(2, length(temp), by = 2)]%%00010%%00010%%00009threshold &lt;- data.frame(samples = temp_s,%%00010%%00009%%00009%%00009%%00009%%00009    value = temp_t) %&gt;%%%00010%%00009%%00009%%00009   %%00009mutate(type = case_when(grepl(&quot;%&quot;, value) ~ &quot;percent&quot;,%%00010%%00009%%00009%%00009   %%00009%%00009%%00009%%00009%%00009    TRUE ~ &quot;absolute&quot;),%%00010%%00009%%00009%%00009   %%00009%%00009  value = as.numeric(gsub(&quot;[^\\d]+&quot;, &quot;&quot;, value, perl = TRUE))) %&gt;%%%00010%%00009%%00009%%00009   %%00009arrange(ordered(samples, unique_design))%%00010}%%00010%%00010# filter out rows%%00010keep &lt;- matrix(nrow = nrow(df_sum), ncol = length(unique_design))%%00010keep &lt;- as.data.frame(keep)%%00010%%00010colnames(keep) &lt;- unique_design%%00010rownames(keep) &lt;- rownames(df_sum)%%00010%%00010if (knime.flow.in[[&quot;filter_rows (index)&quot;]] == 1){%%00009%%00010%%00009%%00010%%00009if (threshold_type == &quot;absolute&quot;){%%00010%%00009%%00009for (sample in unique_design){%%00010%%00009%%00009%%00009keep[sample] &lt;- case_when(df_sum[sample] &gt;= threshold ~ 1,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 %%00009 TRUE ~ 0)%%00010%%00009%%00009}%%00010%%00009} else {%%00010%%00009%%00009df_sum_percent &lt;- df_sum%%00010%%00009%%00009for (sample in unique_design){%%00010%%00009%%00009%%00009df_sum_percent[sample] &lt;- df_sum/sizes$Freq[which(sizes$design == sample)]*100%%00010%%00009%%00009%%00009keep[sample] &lt;- case_when(df_sum_percent[sample] &gt;= threshold ~ 1,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 %%00009 TRUE ~ 0)%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010} else {%%00010%%00009for (i in 1:nrow(threshold)){%%00010%%00009%%00009current_sample &lt;- as.character(threshold$samples[i])%%00010%%00009%%00009%%00010%%00009%%00009if (threshold$type[i] == &quot;absolute&quot;){%%00010%%00009%%00009%%00009keep[current_sample] &lt;- case_when(df_sum[current_sample] &gt;= threshold$value[i] ~ 1,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 %%00009   %%00009    TRUE ~ 0)%%00010%%00009%%00009}%%00010%%00010%%00009%%00009if (threshold$type[i] == &quot;percent&quot;){%%00010%%00009%%00009%%00009temp_percent &lt;- df_sum[current_sample]/sizes$Freq[which(sizes$design == current_sample)]*100%%00010%%00009%%00009%%00009keep[current_sample] &lt;- case_when(temp_percent &gt;= threshold$value[i] ~ 1,%%00010%%00009%%00009%%00009%%00009%%00009%%00009%%00009 %%00009   %%00009    TRUE ~ 0)%%00009%%00009%%00009 %%00009   %%00009  %%00010%%00009%%00009}%%00010%%00009}%%00010}%%00010%%00010# which rows keep and discard%%00010row_sum &lt;- rowSums(keep)%%00010discard_rows &lt;- names(row_sum)[which(row_sum == 0)]%%00010keep_rows &lt;- names(row_sum)[which(row_sum &gt; 0)]"/>
        <entry key="templateUUID" type="xstring" isnull="true" value=""/>
        <entry key="version" type="xstring" value="version 1.x"/>
        <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
        <entry key="sendRowNames" type="xboolean" value="true"/>
        <entry key="sendBatchSize" type="xint" value="10000"/>
        <entry key="knimeInType" type="xstring" value="data.frame"/>
        <entry key="overwriteRHome" type="xboolean" value="true"/>
        <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
        <entry key="useRPathHome" type="xboolean" value="true"/>
        <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="rHome">
                <entry key="used_variable" type="xstring" value="Rcommand"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="performs row filtering,%%00010creates two dfs"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="1348"/>
        <entry key="y-coordinate" type="xint" value="779"/>
        <entry key="width" type="xint" value="145"/>
        <entry key="height" type="xint" value="32"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="39"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.TableToRNodeFactory"/>
    <entry key="node-name" type="xstring" value="Table to R"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.5.2.v202203171119"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.5.2.v202203171119"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="Table to R"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
