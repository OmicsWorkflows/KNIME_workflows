<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="%%00010import json%%00010%%00010file = flow_variables['URI-0'].split(&quot;file:&quot;,1)[1]%%00010%%00010#open current .mzQC file%%00010with open(file) as jsonFile:%%00010%%00009data = json.load(jsonFile)%%00010%%00009jsonFile.close()%%00010    %%00010import pandas as pd%%00010#getting metrics from .mzQC - it is getted according to .mzQC format schema https://github.com/HUPO-PSI/mzQC/tree/main/schema%%00010accessions = data['mzQC']['runQualities'][0]['qualityMetrics']%%00010    %%00010table = pd.DataFrame(accessions)%%00010table['accession'] = table['accession'].apply(lambda x: x[3:])%%00010    %%00010%%00010table = table.drop(columns = 'name')%%00010   %%00010#drop rows with serial data -&gt; it will be used for creating graphs and added as path to graph file%%00010table = table.drop(table[(table.accession == '4000069')  | (table.accession == '4000070') | (table.accession == '4000067')].index)%%00010    %%00010#creting from tuple values string%%00010values = str(table[(table.accession == '4000138')].value)%%00010table[(table.accession == '4000138')].value = values%%00010%%00010#drop rows with tuples values and saving only first value (Its info about%%00010#number of proteins and peptides. The second dropped value is threshold for FDR)       %%00010a = table[table.accession == '4000185'].value.values[0][0]%%00010b = table[table.accession == '4000187'].value.values[0][0]%%00010table = table.drop(table[(table.accession == '4000187')  | (table.accession == '4000185')].index)%%00010table = table.append(pd.DataFrame({'accession': ['4000185', '4000187'], 'value': [a, b]}), ignore_index = True)%%00010%%00010#converting values in colukn 'value_qc_metric' to string, because column contained string and int values%%00010#and KNIME doesnt support it%%00010table[&quot;value_qc_metric&quot;] = table[&quot;value&quot;].apply(str)%%00010table = table.drop(columns = 'value')%%00010%%00010#add current id of ID_run for all added metricsof current run%%00010table[&quot;ID_run&quot;] = [input_table_1['ID_run'][0]] * len(table.index)%%00010#add data type to enable filter values and images%%00010table[&quot;type_data&quot;] = ['single_value'] * len(table.index)%%00010%%00010%%00010#adding images to table%%00010#images (it's IDs and paths) has to be add in this exact way I adding it in table because it has to have smae id_run_quality I define in file paths%%00010%%00010table_images = pd.DataFrame()%%00010table_images['accession'] = ['1000003', '1000001', '1000002', '1000004', '1000005', '1000006', '4000069', '4000070']%%00010table_images['type_data'] = ['path'] * len(table_images['accession'])%%00010table_images['value_image_path'] = [flow_variables['image_id_non_identified'], flow_variables['image_kernel_density_plot'], flow_variables['image_histogram_peptides'], flow_variables['image_measured_identified'],flow_variables['image_mass_acc_hist'],flow_variables['image_mass_acc_in_time'], flow_variables['image_MS1_TIC'], flow_variables['image_MS2_TIC']]%%00010%%00010#add current id of ID_run for all added metrics of current run%%00010table_images[&quot;ID_run&quot;] = [input_table_1['ID_run'][0]] * len(table_images['accession'])%%00010%%00010#concatanation of tabl of single metrics and images in one table%%00010output_table_1 = pd.concat([table_images, table], sort = False, ignore_index=True)%%00010output_table_1[&quot;qc_folder&quot;] = [flow_variables['folder_notrecal_mzQCs_full']] * (len(table_images['accession'])+len(table['accession']))%%00010%%00010#adding QC filename, which was used to get metrics%%00010qc_zip_filename = os.path.split(os.path.abspath(flow_variables['notrecal_mzQC_full_zip']))[-1]%%00010output_table_1[&quot;qc_file&quot;] = [qc_zip_filename] * (len(table_images['accession']) +len(table['accession']))%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value="/home/knimeuser/.pyenv/versions/4-5-2a/bin/python"/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="python3Command">
                <entry key="used_variable" type="xstring" value="python3command"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="Prepare qc metrics for insertion%%00010into table Run_qualities"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="660"/>
        <entry key="y-coordinate" type="xint" value="199"/>
        <entry key="width" type="xint" value="280"/>
        <entry key="height" type="xint" value="40"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="57"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="13"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.5.0.v202111232310"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.5.2.v202203041212"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
