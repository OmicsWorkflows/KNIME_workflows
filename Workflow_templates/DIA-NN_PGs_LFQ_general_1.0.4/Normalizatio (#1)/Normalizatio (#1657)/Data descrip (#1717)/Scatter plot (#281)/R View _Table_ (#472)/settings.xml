<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="Image width" type="xint" value="2500"/>
        <entry key="Image height" type="xint" value="2500"/>
        <entry key="Image resolution" type="xstring" value="150"/>
        <entry key="Image background color" type="xstring" value="#ffffff"/>
        <entry key="Text point size" type="xint" value="12"/>
        <config key="R settings">
            <entry key="script" type="xstring" value="library(tidyverse)%%00010%%00010# customized pairs function%%00010pairs2 &lt;- %%00010  function (x, labels, panel = points, ..., lower.panel = panel, %%00010            upper.panel = panel, diag.panel = NULL, text.panel = textPanel, %%00010            label.pos = 0.5 + has.diag/3, cex.labels = NULL, font.labels = 1, %%00010            row1attop = TRUE, gap = 1) {%%00010    textPanel &lt;- function(x = 0.5, y = 0.5, txt, cex, font) text(x, %%00010                                                                 y, txt, cex = cex, font = font)%%00010    localAxis &lt;- function(side, x, y, xpd, bg, col = NULL, main, %%00010                          oma, ...) {%%00010      Axis(y, side = side, xpd = NA, ...)%%00010      Axis(x, side = side, xpd = NA, ...)%%00010    }%%00010    localPlot &lt;- function(..., main, oma, font.main, cex.main) plot(...)%%00010    localLowerPanel &lt;- function(..., main, oma, font.main, cex.main) lower.panel(...)%%00010    localUpperPanel &lt;- function(..., main, oma, font.main, cex.main) upper.panel(...)%%00010    localDiagPanel &lt;- function(..., main, oma, font.main, cex.main) diag.panel(...)%%00010    dots &lt;- list(...)%%00010    nmdots &lt;- names(dots)%%00010    if (!is.matrix(x)) {%%00010      x &lt;- as.data.frame(x)%%00010      for (i in seq_along(names(x))) {%%00010        if (is.factor(x[[i]]) || is.logical(x[[i]])) %%00010          x[[i]] &lt;- as.numeric(x[[i]])%%00010        if (!is.numeric(unclass(x[[i]]))) %%00010          stop(&quot;non-numeric argument to 'pairs'&quot;)%%00010      }%%00010    }%%00010    else if (!is.numeric(x)) %%00010      stop(&quot;non-numeric argument to 'pairs'&quot;)%%00010    panel &lt;- match.fun(panel)%%00010    if ((has.lower &lt;- !is.null(lower.panel)) &amp;&amp; !missing(lower.panel)) %%00010      lower.panel &lt;- match.fun(lower.panel)%%00010    if ((has.upper &lt;- !is.null(upper.panel)) &amp;&amp; !missing(upper.panel)) %%00010      upper.panel &lt;- match.fun(upper.panel)%%00010    if ((has.diag &lt;- !is.null(diag.panel)) &amp;&amp; !missing(diag.panel)) %%00010      diag.panel &lt;- match.fun(diag.panel)%%00010    if (row1attop) {%%00010      tmp &lt;- lower.panel%%00010      lower.panel &lt;- upper.panel%%00010      upper.panel &lt;- tmp%%00010      tmp &lt;- has.lower%%00010      has.lower &lt;- has.upper%%00010      has.upper &lt;- tmp%%00010    }%%00010    nc &lt;- ncol(x)%%00010    if (nc &lt; 2) %%00010      stop(&quot;only one column in the argument to 'pairs'&quot;)%%00010    has.labs &lt;- TRUE%%00010    if (missing(labels)) {%%00010      labels &lt;- colnames(x)%%00010      if (is.null(labels)) %%00010        labels &lt;- paste(&quot;var&quot;, 1L:nc)%%00010    }%%00010    else if (is.null(labels)) %%00010      has.labs &lt;- FALSE%%00010    oma &lt;- if (&quot;oma&quot; %in% nmdots) %%00010      dots$oma%%00010    else NULL%%00010    main &lt;- if (&quot;main&quot; %in% nmdots) %%00010      dots$main%%00010    else NULL%%00010    if (is.null(oma)) {%%00010      oma &lt;- c(4, 4, 4, 4)%%00010      if (!is.null(main)) %%00010        oma[3L] &lt;- 6%%00010    }%%00010    opar &lt;- par(mfrow = c(nc, nc), mar = rep.int(gap/2, 4), oma = oma)%%00010    on.exit(par(opar))%%00010    dev.hold()%%00010    on.exit(dev.flush(), add = TRUE)%%00010    for (i in if (row1attop) %%00010      1L:nc%%00010      else nc:1L) for (j in 1L:nc) {%%00010        localPlot(x[, j], x[, i], xlab = &quot;&quot;, ylab = &quot;&quot;, axes = FALSE, %%00010                  type = &quot;n&quot;, ...)%%00010        if (i == j || (i &lt; j &amp;&amp; has.lower) || (i &gt; j &amp;&amp; has.upper)) {%%00010          box()%%00010          if (i == nc) {%%00010            localAxis(1, x[, j], x[, i], %%00010                      ...)%%00010            text(x = mean(xlim), y = ylim[1]-((ylim[2]-ylim[1])*0.35), %%00010                 labels = labels[j], xpd = NA, cex = cex.labels, font=2)%%00010            }%%00010          if (j == 1) {%%00010            localAxis(2, x[, j], x[, i], ...)%%00010            text(x = xlim[1]-((xlim[2]-xlim[1])*0.35), y = mean(ylim), %%00010                 labels = labels[i], xpd = NA, srt = 90, cex = cex.labels, font=2)%%00010                        }%%00010            #mtext(text = labels[i], side=2, line=0.5, cex = cex.labels/1.5, font = 2)%%00010            #mtext(text = labels[j], side=3, line=0.5, cex = cex.labels/1.5, font = 2)%%00010          mfg &lt;- par(&quot;mfg&quot;)%%00010          if (i == j) {%%00010            if (has.diag) %%00010              localDiagPanel(as.vector(x[, i]), ...)%%00010            if (has.labs) {%%00010              par(usr = c(0, 1, 0, 1))%%00010              if (is.null(cex.labels)) {%%00010                l.wid &lt;- strwidth(labels, &quot;user&quot;)%%00010                cex.labels &lt;- max(0.8, min(2, 0.9/max(l.wid)))%%00010              }%%00010              text.panel(0.5, label.pos, labels[i], cex = cex.labels, %%00010                         font = font.labels)%%00010            }%%00010          }%%00010          else if (i &lt; j) %%00010            localLowerPanel(as.vector(x[, j]), as.vector(x[, %%00010                                                           i]), ...)%%00010          else localUpperPanel(as.vector(x[, j]), as.vector(x[, %%00010                                                              i]), ...)%%00010          if (any(par(&quot;mfg&quot;) != mfg)) %%00010            stop(&quot;the 'panel' function made a new plot&quot;)%%00010        }%%00010        else par(new = FALSE)%%00010      }%%00010    if (!is.null(main)) {%%00010      font.main &lt;- if (&quot;font.main&quot; %in% nmdots) %%00010        dots$font.main%%00010      else par(&quot;font.main&quot;)%%00010      cex.main &lt;- if (&quot;cex.main&quot; %in% nmdots) %%00010        dots$cex.main%%00010      else par(&quot;cex.main&quot;)%%00010      mtext(main, 3, 3, TRUE, 0.5, cex = cex.main, font = font.main)%%00010    }%%00010    invisible(NULL)%%00010}%%00010  %%00010# load data%%00010data &lt;- knime.in%%00010%%00010# load value for data imputation and turn it into a numeric value%%00010if (knime.flow.in[[&quot;imputation_value&quot;]] != &quot;None&quot;){%%00010%%00009imp &lt;- as.numeric(knime.flow.in[[&quot;imputation_value&quot;]])%%00010}%%00010%%00010# set limits of axes manually%%00010# or calculate limits based on minimum and maximum value in the whole df%%00010if (knime.flow.in[[&quot;manual_x_axis_limits&quot;]] != &quot;Auto&quot;){%%00010 %%00009xlim &lt;- c(as.numeric(knime.flow.in[[&quot;manual_x_min&quot;]]),%%00010  %%00009%%00009%%00009as.numeric(knime.flow.in[[&quot;manual_x_max&quot;]]))%%00010} else {%%00010  %%00009xlim &lt;- c(min(data, na.rm = TRUE), max(data, na.rm = TRUE))%%00010}%%00010  %%00010if (knime.flow.in[[&quot;manual_y_axis_limits&quot;]] != &quot;Auto&quot;){%%00010  %%00009ylim &lt;- c(as.numeric(knime.flow.in[[&quot;manual_y_min&quot;]]),%%00010  %%00009%%00009%%00009as.numeric(knime.flow.in[[&quot;manual_y_max&quot;]]))%%00010} else if (knime.flow.in[[&quot;MAplot&quot;]] == 1){%%00010%%00009variance &lt;- apply(data, 1, function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE))%%00010%%00009variance_row &lt;- unlist(data[which.max(variance), ], use.names = FALSE)%%00010%%00009ymin &lt;- min(variance_row, na.rm = TRUE) - max(variance_row, na.rm = TRUE)%%00010%%00009ymax &lt;- max(variance_row, na.rm = TRUE) - min(variance_row, na.rm = TRUE)%%00010%%00009ylim &lt;- c(ymin, ymax)%%00010} else {%%00010  %%00009ylim &lt;- c(min(data, na.rm = TRUE), max(data, na.rm = TRUE))%%00010}%%00010%%00010# variables for title offset%%00010l &lt;- 2%%00010oma_down &lt;- 5%%00010oma_up &lt;- 5%%00010%%00010# voluntary components of the plot title%%00010## MA plot%%00010if (knime.flow.in[[&quot;MAplot&quot;]] == 0){%%00010%%00009complete_title = &quot;Density (dark blue -&gt; dark red) scatter plot ('y' on 'x') matrix&quot;%%00010} else {%%00010%%00009complete_title = &quot;Density (dark blue -&gt; dark red) MA plot ('x-y' on '(x+y)/2') matrix&quot;%%00010}%%00010## imputation%%00010if (knime.flow.in[[&quot;imputation_value&quot;]] != &quot;None&quot;){%%00010%%00009complete_title = paste(complete_title, &quot;\n pairwise imputation by &quot;, %%00010%%00009%%00009%%00009%%00009 %%00009  as.character(knime.flow.in[[&quot;imputation_value&quot;]]), %%00010%%00009%%00009%%00009%%00009 %%00009  &quot; was done when a single value was missing&quot;,%%00010%%00009%%00009%%00009%%00009 %%00009  sep = &quot;&quot;)%%00010%%00009l &lt;- l - 0.4%%00010%%00009oma_down &lt;- oma_down - 0.33%%00010%%00009oma_up &lt;- oma_up + 0.33%%00010}%%00010## regression type%%00010if (knime.flow.in[[&quot;regression_type&quot;]] != &quot;none&quot;){%%00010%%00009if (knime.flow.in[[&quot;regression_type&quot;]] == &quot;lowess&quot;){%%00010%%00009%%00009complete_title = paste(complete_title, &quot;\n red curve is estimated nonparametric lowess model&quot;)%%00010%%00009} else {%%00010%%00009%%00009complete_title = paste(complete_title, &quot;\n red curve is estimated linear regression model&quot;)%%00010%%00009}%%00010%%00009l &lt;- l - 0.4%%00010%%00009oma_down &lt;- oma_down - 0.33%%00010%%00009oma_up &lt;- oma_up + 0.33%%00010}%%00010## unity line%%00010if (knime.flow.in[[&quot;show_unity&quot;]] == 1){%%00010%%00009complete_title = paste(complete_title, &quot;\n dashed line is unity line (x=y)&quot;)%%00010%%00009l &lt;- l - 0.4%%00010%%00009oma_down &lt;- oma_down - 0.33%%00010%%00009oma_up &lt;- oma_up + 0.33%%00010}%%00010## user-defined subtitle%%00010complete_title = paste(complete_title, &quot;\n &quot;, knime.flow.in[[&quot;graph_subtitle&quot;]])%%00010%%00010# scatterplot function%%00010panel_scatterplot &lt;- function(x,y, ...) {%%00010  ## create df from two selected columns%%00010  x &lt;- unlist(x)%%00010  y &lt;- unlist(y)%%00010%%00010  if (knime.flow.in[[&quot;MAplot&quot;]] == 0) {%%00010  %%00009df &lt;- data.frame(x = x,%%00010  %%00009%%00009%%00009    %%00009  y = y,%%00010  %%00009%%00009%%00009    %%00009  dens = rep(1, times = length(x)),%%00010  %%00009%%00009%%00009    %%00009  col = rep(&quot;grey20&quot;, times = length(x)))%%00010  } else {%%00010  %%00009df &lt;- data.frame(x_old = x,%%00010  %%00009%%00009%%00009    %%00009  y_old = y,%%00010  %%00009%%00009%%00009    %%00009  dens = rep(1, times = length(x)),%%00010  %%00009%%00009%%00009    %%00009  col = rep(&quot;grey20&quot;, times = length(x)))%%00009%%00010  }%%00010%%00010  ## omit rows with both x and y value imputed%%00010  if (knime.flow.in[[&quot;imputation_value&quot;]] != &quot;None&quot;){%%00010  %%00009df  &lt;- subset(df, df[,1] != imp | df[,2] != imp)%%00010  } else {%%00010  %%00009df &lt;- na.omit(df)%%00009%%00010  }%%00010%%00010  ## is MA?%%00010  if (knime.flow.in[[&quot;MAplot&quot;]] == 1) {%%00010  %%00009df &lt;- df %&gt;%%%00010  %%00009%%00009mutate(x = (x_old + y_old)/2,%%00010  %%00009%%00009%%00009  y = (x_old - y_old)) %&gt;%%%00010  %%00009%%00009select(-x_old, -y_old)%%00010  } %%00010  %%00010  x &lt;- unlist(df$x)%%00010  y &lt;- unlist(df$y)%%00010  %%00010  ## assign color to points %%00010  tryCatch({%%00010  %%00009x &lt;- densCols(x, y, colramp=colorRampPalette(c(&quot;black&quot;, &quot;white&quot;)))%%00010  %%00009df$dens &lt;- col2rgb(x)[1,] + 1L%%00010  %%00009cols &lt;-  colorRampPalette(c(&quot;#000080&quot;, &quot;#004cff&quot;, &quot;#29ffce&quot;,&quot;#ceff29&quot;, &quot;#ff6800&quot;, &quot;#800000&quot;))(256)%%00010  %%00009df$col &lt;- cols[df$dens]%%00010  }, error = function(err) {%%00010  %%00009df$dens &lt;- rep(1, times = nrow(df))%%00010  %%00009df$col &lt;- rep(&quot;grey20&quot;, times = nrow(df))%%00010  })%%00010%%00010  par(new = TRUE)%%00010%%00010  ## create plot%%00010  plot(y~x, data = df[order(df$dens),], %%00010       ylim = ylim, xlim = xlim, pch = 3, col = col,%%00010       cex = 0.5, xlab = &quot;&quot;, ylab = &quot;&quot;,%%00010       main = &quot;&quot;, xaxt = 'n', yaxt = 'n')%%00010       %%00010  ## show unity line    %%00010  if (knime.flow.in[[&quot;show_unity&quot;]] == 1){%%00010  %%00009if (knime.flow.in[[&quot;MAplot&quot;]] == 0) {%%00010  %%00009%%00009abline(a = 0, b = 1, lty = 2)%%00010  %%00009} else {%%00010  %%00009%%00009abline(h = 0, lty = 2)%%00010  %%00009}%%00010  }%%00010%%00010  ## show regression line%%00010  tryCatch({%%00010  %%00009if (knime.flow.in[[&quot;regression_type&quot;]] == &quot;lowess&quot;){%%00010  %%00009%%00009lines(lowess(x = df$x, y = df$y), col = &quot;red&quot;)%%00010  %%00009} else if(knime.flow.in[[&quot;regression_type&quot;]] == &quot;linear&quot;){%%00010  %%00009%%00009abline(lm(df$y ~ df$x), col = &quot;red&quot;)%%00009%%00010  }}, error = function(err) {%%00009%%00010  })%%00010}%%00010%%00010# density function%%00010panel_density &lt;- function(x, ...){%%00010  ## impute missing values%%00010  if (knime.flow.in[[&quot;imputation_value&quot;]] != &quot;None&quot;){%%00010  %%00009x &lt;- x[which(x != knime.flow.in[[&quot;imputation_value&quot;]])]%%00010  } else {%%00010  %%00009x &lt;- na.omit(x)%%00009%%00010  }%%00010  %%00010  par(new = TRUE)%%00010%%00010  tryCatch({%%00010  %%00009dens &lt;- density(x, na.rm = TRUE)%%00010  %%00009ylimit &lt;- max(dens$y)*1.5%%00010  %%00009plot(dens, main = &quot;&quot;, xlab = &quot;&quot;, ylab = &quot;&quot;, xlim = xlim,%%00010  %%00009%%00009ylim = c(0, ylimit), xaxt = 'n', yaxt = 'n')%%00010  }, error = function(err) {%%00010  %%00009plot.new()%%00010  })%%00010}%%00010%%00010# final plot%%00010par(oma = c(0,0,0,2))%%00010%%00010pairs2(data,%%00010      %%00009lower.panel = panel_scatterplot,%%00010      %%00009upper.panel = panel_scatterplot,%%00010      %%00009diag.panel = panel_density,%%00010      %%00009cex.labels = 1,%%00010      %%00009font.labels = 2,%%00010      %%00009cex.axis = 0.75,%%00010      %%00009xlim = xlim,%%00010      %%00009ylim = ylim,%%00010      %%00009gap = 0.5,%%00010      %%00009oma = c(oma_down, 6, oma_up, 4))%%00010%%00010title(complete_title, line = l, adj = 0.5, cex.main = 0.65, font.main = 1, xpd=NA)"/>
            <entry key="templateUUID" type="xstring" isnull="true" value=""/>
            <entry key="version" type="xstring" value="version 1.x"/>
            <entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
            <entry key="sendRowNames" type="xboolean" value="true"/>
            <entry key="sendBatchSize" type="xint" value="10000"/>
            <entry key="knimeInType" type="xstring" value="data.frame"/>
            <entry key="overwriteRHome" type="xboolean" value="true"/>
            <entry key="rHome" type="xstring" value="/home/knimeuser/.Renv/4.2.0/4.5.2a/lib/R"/>
            <entry key="useRPathHome" type="xboolean" value="true"/>
            <entry key="condaVariableName" type="xstring" isnull="true" value=""/>
        </config>
        <entry key="Image type" type="xstring" value="PNG"/>
    </config>
    <config key="variables">
        <config key="tree">
            <config key="Image width">
                <entry key="used_variable" type="xstring" value="total_width"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
            <config key="Image height">
                <entry key="used_variable" type="xstring" value="total_width"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
            <config key="R settings">
                <config key="rHome">
                    <entry key="used_variable" type="xstring" value="Rcommand"/>
                    <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
                </config>
            </config>
        </config>
        <entry key="version" type="xstring" value="V_2019_09_13"/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="create plot"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="909"/>
        <entry key="y-coordinate" type="xint" value="559"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="17"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="11"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.r.RViewNodeFactory"/>
    <entry key="node-name" type="xstring" value="R View (Table)"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.6.0.v202205161326"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.6.0.v202205161326"/>
    <config key="factory_settings"/>
    <entry key="name" type="xstring" value="R View (Table)"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
