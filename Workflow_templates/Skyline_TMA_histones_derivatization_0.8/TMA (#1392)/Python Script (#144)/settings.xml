<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="import ast%%00010import sys, os.path%%00010%%00010# convert strings to dictionaries%%00010enabled_sequences_dict = ast.literal_eval(flow_variables['enabled_sequences_dic'])%%00010modification_dict = ast.literal_eval(flow_variables['modification_dic'])%%00010fasta_dict = ast.literal_eval(flow_variables['fasta_dict'])%%00010%%00010# set required variables%%00010column_protein_name = flow_variables['column_protein_name']%%00010column_protein_accession = flow_variables['column_protein_accession']%%00010column_peptite_modified_sequence_with_masses = flow_variables['column_peptite_modified_sequence_with_masses']%%00010fasta_initial_number = flow_variables['fasta_initial_number']%%00010protein_id_prefix_regex = flow_variables['protein_id_prefix_regex']%%00010if not protein_id_prefix_regex:%%00010%%00009protein_id_prefix_regex_template = flow_variables['protein_id_prefix_regex_template (index)']%%00010%%00009if protein_id_prefix_regex_template == 0:%%00010%%00009%%00009protein_id_prefix_regex = &quot;[^\|]*\|[^\|]*\|([^_]*)&quot;%%00010%%00009elif protein_id_prefix_regex_template == 1:%%00010%%00009%%00009protein_id_prefix_regex = &quot;([^_]*)&quot;%%00010%%00010# set enabled sequences to proteins%%00010for accession in enabled_sequences_dict.keys():%%00010%%00009if accession in fasta_dict.keys():%%00010%%00009%%00009fasta_dict[accession][&quot;enabled_sequences&quot;] = enabled_sequences_dict[accession]%%00010%%00010# set source path for custom scripts%%00010script_path = flow_variables['context.workflow.absolute-path'] + '/my_scripts'%%00010%%00010sys.path.append(script_path)%%00010%%00010from sequence_class import *%%00010from tma_functions import *%%00010%%00010%%00010# dataframe to edit%%00010df = input_table_1.copy()%%00010%%00010# create new columns%%00010df[&quot;Sequence with modif&quot;] = None%%00010df[&quot;Sequence with natural modif&quot;] = None%%00010df[&quot;Sequence without modif&quot;] = None%%00010df[&quot;Sequence identifier&quot;] = None%%00010df[&quot;Protein segment&quot;] = None%%00010df[&quot;n_term_old&quot;] = None%%00010df[&quot;n_term&quot;] = None%%00010df[&quot;all_amino_labels&quot;] = None%%00010df[&quot;label_old&quot;] = None%%00010df[&quot;label&quot;] = None%%00010df[&quot;sequence&quot;] = None%%00010df[&quot;desired?&quot;] = None%%00010df[&quot;errors&quot;] = None%%00010%%00010for index, row in df.iterrows():%%00010%%00009try:%%00010%%00009%%00009accession = row[column_protein_accession]%%00010%%00009%%00009modif_peptide = row[column_peptite_modified_sequence_with_masses]%%00010%%00009%%00009%%00010%%00009%%00009# id_prefix = get_id_prefix_from_protein_name(row[column_protein_name])%%00010%%00009%%00009#id_prefix = get_id_prefix_from_protein_name_by_regex(row[column_protein_name], protein_id_prefix_regex)%%00010%%00009%%00009id_prefix = &quot;&quot;%%00010%%00009%%00009if protein_id_prefix_regex:%%00010%%00009%%00009%%00009match = re.search(protein_id_prefix_regex, row[column_protein_name])%%00010%%00009%%00009%%00009if match:%%00010%%00009%%00009%%00009%%00009if match.group(1):%%00010%%00009%%00009%%00009%%00009%%00009id_prefix = match.group(1)%%00010%%00009%%00009%%00010%%00009%%00009#print(&quot;id_prefix_regex: &quot; + protein_id_prefix_regex)%%00010%%00009%%00009#print(&quot;id_prefix: &quot; + id_prefix)%%00010%%00009%%00009%%00010%%00009%%00009s = Sequence(accession, modif_peptide, fasta_dict, modification_dict, fasta_initial_number)%%00010%%00009%%00010%%00009%%00009# set values to new columns%%00010%%00009%%00009df.at[index, &quot;Sequence with modif&quot;] = s.get_sequence_with_modif()%%00010%%00009%%00009df.at[index, &quot;Sequence with natural modif&quot;] = s.get_sequence_with_natural_modif()%%00010%%00009%%00009df.at[index, &quot;Sequence without modif&quot;] = s.get_sequence_without_modif()%%00010%%00009%%00009df.at[index, &quot;Sequence identifier&quot;] = id_prefix + &quot;_&quot; + s.get_identificator()%%00010%%00009%%00009df.at[index, &quot;Protein segment&quot;] = id_prefix + &quot;_&quot; + s.get_protein_segment()%%00010%%00009%%00009df.at[index, &quot;n_term_old&quot;] = s.n_term_old%%00010%%00009%%00009df.at[index, &quot;n_term&quot;] = s.n_term%%00010%%00009%%00009df.at[index, &quot;all_amino_labels&quot;] = s.all_amino_labels%%00010%%00009%%00009df.at[index, &quot;label_old&quot;] = s.label_old%%00010%%00009%%00009df.at[index, &quot;label&quot;] = s.label%%00010%%00009%%00009df.at[index, &quot;sequence&quot;] = s.sequence_correct%%00010%%00009%%00009df.at[index, &quot;desired?&quot;] = s.desired%%00010%%00009%%00009df.at[index, &quot;errors&quot;] = s.get_errors()%%00010%%00009except:%%00010%%00009%%00009raise ValueError('Error encountered at row index: ' + index + '. Please perform a manual check of the input table')%%00010%%00009%%00010# Send edited dataframe to output%%00010output_table_1 = df%%00010"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value="/home/knimeuser/.pyenv/versions/4-5-2a/bin/python3"/>
    </config>
    <config key="variables">
        <entry key="version" type="xstring" value="V_2019_09_13"/>
        <config key="tree">
            <config key="python3Command">
                <entry key="used_variable" type="xstring" value="python3command"/>
                <entry key="exposed_variable" type="xstring" isnull="true" value=""/>
            </config>
        </config>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="MAIN SCRIPT%%00010Create output table"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="389"/>
        <entry key="y-coordinate" type="xint" value="499"/>
        <entry key="width" type="xint" value="142"/>
        <entry key="height" type="xint" value="32"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="10"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="31"/>
                <entry key="fontname" type="xstring" value="Sans"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="10"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.6.0.v202206032030"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.6.0.v202206100850"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
