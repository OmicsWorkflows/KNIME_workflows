<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="script" type="xstring" value="# imports used libraries%%00010library(limma)%%00010%%00010data &lt;- data.matrix(knime.in)%%00010%%00010# creates list of sample type names based on specified design; gets rid of leading and trailing whitespaces in the process%%00010groups_list &lt;- trimws(strsplit(knime.flow.in[[&quot;limma_design&quot;]],',')[[1]])%%00010%%00010# creates table of unique factors and their positions%%00010factor_groups &lt;- factor(c(groups_list))%%00010%%00010# creates design to be used during LIMMA processing%%00010## based on the pairs and blocks specified in the form it creates design in specified way%%00010if (knime.flow.in[[&quot;samples_pairs&quot;]] == &quot;none&quot; &amp;&amp; knime.flow.in[[&quot;samples_blocks&quot;]] == &quot;none&quot;) {%%00010%%00009limma_variant &lt;- &quot;several_groups&quot;%%00010%%00009design &lt;- model.matrix(~factor_groups + 0)%%00010} else if (knime.flow.in[[&quot;samples_pairs&quot;]] != &quot;none&quot; &amp;&amp; knime.flow.in[[&quot;samples_blocks&quot;]] == &quot;none&quot;) {%%00010%%00009limma_variant &lt;- &quot;paired_samples&quot;%%00010%%00009pairs_list &lt;- trimws(strsplit(knime.flow.in[[&quot;samples_pairs&quot;]],',')[[1]])%%00010%%00009design &lt;- model.matrix(~ factor_groups + pairs_list + 0)%%00010} else if (knime.flow.in[[&quot;samples_pairs&quot;]] == &quot;none&quot; &amp;&amp; knime.flow.in[[&quot;samples_blocks&quot;]] != &quot;none&quot;) {%%00010%%00009limma_variant &lt;- &quot;blocked_samples&quot;%%00010%%00009blocks_list &lt;- trimws(strsplit(knime.flow.in[[&quot;samples_blocks&quot;]],',')[[1]])%%00010%%00009# original way how to degine the whole design at once%%00010%%00009design &lt;- model.matrix(~ 0 + factor_groups + blocks_list)%%00010%%00009#design_groups &lt;- model.matrix(~ 0 + factor_groups)%%00010%%00009#design_blocks &lt;- model.matrix(~ 0 + blocks_list)%%00010%%00009#if (nrow(design_groups) == nrow(design_blocks)) {%%00010%%00009#%%00009design &lt;- cbind(design_groups, design_blocks)%%00010%%00009#%%00009is.fullrank(design)%%00010%%00009#%%00009nonEstimable(design)%%00010%%00009#} else {%%00010%%00009#%%00009stop(&quot;Different lengths of samples groups vector and samples blocks, please verify the respective form fields!&quot;)%%00010%%00009#}%%00010#%%00009stop(&quot;Blocked samples LIMMA variant is not implemented yet, please contact us if you would be interested in the implementation!&quot;)%%00010} else if (knime.flow.in[[&quot;samples_pairs&quot;]] != &quot;none&quot; &amp;&amp; knime.flow.in[[&quot;samples_blocks&quot;]] != &quot;none&quot;) {%%00010%%00009limma_variant &lt;- &quot;multilevel_experiment&quot;%%00010%%00009stop(&quot;Multi-level experiment LIMMA variant is not implemented yet, please contact us if you would be interested in the implementation!&quot;)%%00010} else {%%00010%%00009stop(&quot;Not expected LIMMA test variant (several groups, paired samples, blocked samples or paired and blocked samples). Please, check the input or contact us for further assistance.&quot;)%%00010}%%00010%%00010# changes column names in the design to be equal to factor names because they contain factors table name by default...%%00010colnames(design) &lt;- gsub(&quot;factor_groups&quot;,&quot;&quot;,colnames(design))%%00010%%00010# changes column names in the design to be equal to factor names because they contain factors table name by default...%%00010colnames(design) &lt;- gsub(&quot;blocks_list&quot;,&quot;&quot;,colnames(design))%%00010%%00010%%00010%%00010# fits linear model using least square method%%00010fit=lmFit(data,design)%%00010%%00010# gets a list of contrasts to be computed from the set flow variable and get rid of leading and trailing whitespaces%%00010contrasts_list &lt;- trimws(strsplit(knime.flow.in[[&quot;contrasts&quot;]],'[,]+')[[1]])%%00010%%00010# decide whether to go for individual comparisons reporting or one for all of them (i.e. one-way ANOVA)%%00010if (knime.flow.in[[&quot;comparisons_separately&quot;]] == 1) {%%00010%%00009## when individual comparison should be reported...%%00010%%00009# creates empty list to be filled with list of dataframes created in the for loop%%00010%%00009partial_results_list = list()%%00010%%00010%%00009# for loop for each contrast%%00010%%00009for (contrast in contrasts_list) {%%00010%%00009%%00009# for check only%%00010%%00009%%00009#print(contrast)%%00009%%00009%%00010%%00009%%00009cont.matrix &lt;- makeContrasts(contrasts=contrast, levels=design)%%00010%%00009%%00009fit2 &lt;- contrasts.fit(fit, cont.matrix)%%00010%%00009%%00009fit2 &lt;- eBayes(fit2)%%00010%%00009%%00009partial_result &lt;- topTable(fit2, number=Inf, sort='none', adjust.method=knime.flow.in[[&quot;adjP_method&quot;]])%%00010%%00009%%00009# use in case some changes in column names would be needed...%%00010%%00009%%00009#colnames(partial_result) &lt;- paste(contrast, colnames(partial_result), sep = &quot;_&quot;)%%00010%%00010%%00009%%00009# writes the particular contract results dataframe into a dedicated list%%00010%%00009%%00009partial_results_list[[contrast]] &lt;- partial_result%%00010%%00009}%%00010%%00009%%00010%%00009# writes all dataframes in the list into a single dataframe - the same order of rows expected, no indexes checking is done%%00010%%00009results = do.call(cbind, partial_results_list)%%00010%%00010} else {%%00010%%00009## when it should be done in one-way ANOVA manner...%%00010%%00009# define contrasts matrix for the comparisons using all specified comparisons/contrasts%%00010%%00009cont.matrix &lt;- makeContrasts(contrasts=contrasts_list, levels=design)%%00010%%00009%%00010%%00009# fits contrasts to the original fit%%00010%%00009fit2 &lt;- contrasts.fit(fit, cont.matrix)%%00010%%00009fit2 &lt;- eBayes(fit2)%%00010%%00009# performs p-value adjustment using topTable function and returns all, not sorted rows%%00010%%00009results &lt;- topTable(fit2, number=Inf, sort='none', adjust.method=knime.flow.in[[&quot;adjP_method&quot;]])%%00010%%00010}%%00010%%00010# writes out the output to the KNIME table as data frame%%00010knime.out &lt;- as.data.frame(results)%%00010"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
<entry key="sendRowNames" type="xboolean" value="true"/>
<entry key="sendBatchSize" type="xint" value="10000"/>
<entry key="knimeInType" type="xstring" value="data.frame"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="LIMMA test"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="269"/>
<entry key="y-coordinate" type="xint" value="479"/>
<entry key="width" type="xint" value="142"/>
<entry key="height" type="xint" value="17"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.r.RSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="R Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.1.1.v202001312017"/>
<entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.1.1.v202001312017"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="R Snippet"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
